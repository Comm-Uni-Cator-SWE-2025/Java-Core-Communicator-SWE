# ==============================================================
# Azure DevOps Pipeline: Java CI with Maven (Self-Hosted Mac)
# ==============================================================

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - '**/*.md'

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - '**/*.md'

# Use your self-hosted agent pool
pool:
  name: Default

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

jobs:
- job: Build
  displayName: "Java CI with Maven"
  timeoutInMinutes: 30

  steps:
    # -----------------------------
    # 1. Checkout Code
    # -----------------------------
    - checkout: self
      clean: true

    # -----------------------------
    # 2. Verify Local Environment (Java + Maven)
    # -----------------------------
    - script: |
        echo "Agent: $(Agent.Name)"
        echo "Pool: $(Agent.PoolName)"
        echo "Using pre-installed Java & Maven on the self-hosted agent"
        java -version
        mvn -version
      displayName: "Verify Environment"

    # -----------------------------
    # 3. Build and Compile
    # -----------------------------
    - script: mvn -B clean compile
      displayName: "Build with Maven"

    # -----------------------------
    # 4. Run Checkstyle
    # -----------------------------
    - script: mvn -B checkstyle:check
      displayName: "Run Checkstyle"

    # -----------------------------
    # 5. Run Tests with JaCoCo Coverage
    # -----------------------------
    - script: mvn -B test jacoco:report
      displayName: "Run Tests with Coverage"

    # -----------------------------
    # 6. Package Application
    # -----------------------------
    - script: mvn -B package -DskipTests
      displayName: "Package Application"

    # -----------------------------
    # 7. Publish Test Results (JUnit)
    # -----------------------------
    - task: PublishTestResults@2
      displayName: "Publish Test Results"
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true

    # -----------------------------
    # 8. Publish Code Coverage (JaCoCo)
    # -----------------------------
    - task: PublishCodeCoverageResults@1
      displayName: "Publish JaCoCo Coverage"
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '**/jacoco.xml'
        reportDirectory: '**/site/jacoco'
        failIfCoverageEmpty: false

    # -----------------------------
    # 9. Copy Build Artifacts
    # -----------------------------
    - task: CopyFiles@2
      displayName: "Copy Build Artifacts"
      condition: succeeded()
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)'
        contents: |
          **/target/*.jar
          **/site/**
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    # -----------------------------
    # 10. Publish Build Artifacts
    # -----------------------------
    - task: PublishBuildArtifacts@1
      displayName: "Publish Build Artifacts"
      condition: succeeded()
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'java-build-artifacts'
        publishLocation: 'Container'

    # -----------------------------
    # 11. Build Summary
    # -----------------------------
    - script: |
        echo "##[section]Build Summary"
        echo "âœ… Build completed successfully"
        echo "âœ… JUnit tests executed"
        echo "âœ… JaCoCo coverage report generated"
        echo "âœ… Checkstyle validation passed"
        echo ""
        echo "ðŸ“Š Artifacts available under:"
        echo "  - Test Results: in Azure DevOps build summary"
        echo "  - Coverage Report: target/site/jacoco/index.html"
        echo "  - JAR Files: under build artifacts"
      displayName: "Display Build Summary"
      condition: always()
